#include "civic.h"

/**
 *  print vec to stdout
 *  @param int[]
 */
void printIntVec( int[n] vec)
{
    // iterate over the values
    for ( int i=0, n)
    {
        // print the value
        printInt ( vec[i]);

        // print a space
        if ( (i+1) != n) printSpaces( 1);
    }
}

/**
 *  print vec to stdout
 *  @param float[]
 */
void printFloatVec( float[n] vec) 
{
    // iterate over the values
    for ( int i=0, n)
    {
        // print the value
        printFloat ( vec[i]);

        // print a space
        if ( (i+1) != n) printSpaces( 1);
    }
}

/**
 *  print mat to stdout
 *  @param int[,]
 */
void printIntMat( int[m, n] mat)
{
    // iterate over the values
    for ( int x=0, m)
    {
        // iterate over the values
        for ( int y=0, n)
        {
            // print the value
            printInt ( mat[x, y]);

            // print a space
            if ( (y+1) != n) printSpaces( 1);
        }

        // print a space
        if ( (x+1) != m) printNewlines( 1);
    }
}

/**
 *  print mat to stdout
 *  @param float[,]
 */
void printFloatMat( float[m,n] mat) 
{
    // iterate over the values
    for ( int x=0, m)
    {
        // iterate over the values
        for ( int y=0, n)
        {
            // print the value
            printFloat ( mat[x, y]);

            // print a space
            if ( (y+1) != n) printSpaces( 1);
        }

        // print a space
        if ( (x+1) != m) printNewlines( 1);
    }
}

/**
 *  scan vec from stdin;
 *  @param int[]
 */
void scanIntVec( int[n] vec)
{
    // iterate over the values
    for ( int i=0, n)
    {
        // scan the value
        vec[i] = scanInt ( );
    }
}

/**
 *  scan vec from stdin;
 *  @param float[]
 */
void scanFloatVec( float[n] vec)
{
    // iterate over the values
    for ( int i=0, n)
    {
        // scan the value
        vec[i] = scanFloat ( );
    }
}

/**
 *  scan mat from stdin
 *  @param int[,]
 */
void scanIntMat( int[m,n] mat)
{
    // iterate over the values
    for ( int x=0, m)
    {
        // iterate over the values
        for ( int y=0, n)
        {
            // scan the value
            mat[x, y] = scanInt ( );
        }
    }
}

/**
 *  scan mat from stdin
 *  @param float[,]
 */
void scanFloatMat( float[m,n] mat)
{
    // iterate over the values
    for ( int x=0, m)
    {
        // iterate over the values
        for ( int y=0, n)
        {
            // scan the value
            mat[x, y] = scanFloat ( );
        }
    }
}

/**
 *  multiply two floating point matrices a and b and store result in c
 *  @param float[,]
 *  @param float[,]
 *  @param float[,]
 */
bool matMul( float[m,n] a, float[o,p] b, float[q,l] c)
{
    if (m != o || n != p) return false;
    if (m != q || n != l) return false;

    // iterate over the values
    for ( int x=0, m)
    {
        // iterate over the values
        for ( int y=0, n)
        {
            // scan the value
            c[x, y] = a[x, y] * b[x, y];
        }
    }

    return true;
}

/*
export int main( )
{
    int[4] intVec = [1, 2, 3, 4];
    printIntVec( intVec);
    printNewlines( 1);

    float[4] floatVec = [1.4, 2.3, 3.3, 4.1];
    printFloatVec( floatVec);
    printNewlines( 1);

    int[4, 4] intMap = [[1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4]];
    printIntMat( intMap);
    printNewlines( 1);

    float[4, 4] floatMap = [[1.4, 2.3, 3.2, 4.1], [1.4, 2.3, 3.2, 4.1], [1.4, 2.3, 3.2, 4.1], [1.4, 2.3, 3.2, 4.1]];
    printFloatMat( floatMap);
    printNewlines( 1);

    int[4] intVecScan = [];
    scanIntVec( intVecScan);
    printIntVec( intVecScan);
    printNewlines( 1);

    float[4] floatVecScan = [];
    scanFloatVec( floatVecScan);
    printFloatVec( floatVecScan);
    printNewlines( 1);

    int[4, 4] intMatScan = [];
    scanIntMat( intMatScan);
    printIntMat( intMatScan);
    printNewlines( 1);

    float[4, 4] floatMatScan = [];
    scanFloatMat( floatMatScan);
    printFloatMat( floatMatScan);
    printNewlines( 1);

    float[4, 4] matMula = [[1.4, 2.3, 3.2, 4.1], [1.4, 2.3, 3.2, 4.1], [1.4, 2.3, 3.2, 4.1], [1.4, 2.3, 3.2, 4.1]];
    float[4, 4] matMulb = [[1.4, 2.3, 3.2, 4.1], [1.4, 2.3, 3.2, 4.1], [1.4, 2.3, 3.2, 4.1], [1.4, 2.3, 3.2, 4.1]];
    float[4, 4] matMulbOutput = [];

    matMul( matMula, matMulb, matMulbOutput);
    printFloatMat( matMulbOutput);
    printNewlines( 1);

    return 0;
}
*/