Terminals unused in grammar

   COMMA
   NE


Rules useless in parser due to conflicts

    3 program: stmts


State 4 conflicts: 1 reduce/reduce


Grammar

    0 $accept: program $end

    1 program: module

    2 module: stmts

    3 program: stmts

    4 stmts: stmt stmts
    5      | stmt

    6 stmt: assign

    7 assign: varlet LET expr SEMICOLON

    8 varlet: ID

    9 expr: constant
   10     | ID
   11     | BRACKET_L expr binop expr BRACKET_R

   12 constant: floatval
   13         | intval
   14         | boolval

   15 floatval: FLOAT

   16 intval: NUM

   17 boolval: TRUEVAL
   18        | FALSEVAL

   19 binop: PLUS
   20      | MINUS
   21      | STAR
   22      | SLASH
   23      | PERCENT
   24      | LE
   25      | LT
   26      | GE
   27      | GT
   28      | EQ
   29      | OR
   30      | AND


Terminals, with rules where they appear

$end (0) 0
error (256)
BRACKET_L (258) 11
BRACKET_R (259) 11
COMMA (260)
SEMICOLON (261) 7
MINUS (262) 20
PLUS (263) 19
STAR (264) 21
SLASH (265) 22
PERCENT (266) 23
LE (267) 24
LT (268) 25
GE (269) 26
GT (270) 27
EQ (271) 28
NE (272)
OR (273) 29
AND (274) 30
TRUEVAL (275) 17
FALSEVAL (276) 18
LET (277) 7
NUM (278) 16
FLOAT (279) 15
ID (280) 8 10


Nonterminals, with rules where they appear

$accept (26)
    on left: 0
program (27)
    on left: 1 3, on right: 0
module (28)
    on left: 2, on right: 1
stmts (29)
    on left: 4 5, on right: 2 3 4
stmt (30)
    on left: 6, on right: 4 5
assign (31)
    on left: 7, on right: 6
varlet (32)
    on left: 8, on right: 7
expr (33)
    on left: 9 10 11, on right: 7 11
constant (34)
    on left: 12 13 14, on right: 9
floatval (35)
    on left: 15, on right: 12
intval (36)
    on left: 16, on right: 13
boolval (37)
    on left: 17 18, on right: 14
binop (38)
    on left: 19 20 21 22 23 24 25 26 27 28 29 30, on right: 11


State 0

    0 $accept: . program $end

    ID  shift, and go to state 1

    program  go to state 2
    module   go to state 3
    stmts    go to state 4
    stmt     go to state 5
    assign   go to state 6
    varlet   go to state 7


State 1

    8 varlet: ID .

    $default  reduce using rule 8 (varlet)


State 2

    0 $accept: program . $end

    $end  shift, and go to state 8


State 3

    1 program: module .

    $default  reduce using rule 1 (program)


State 4

    2 module: stmts .
    3 program: stmts .

    $end      reduce using rule 2 (module)
    $end      [reduce using rule 3 (program)]
    $default  reduce using rule 2 (module)


State 5

    4 stmts: stmt . stmts
    5      | stmt .

    ID  shift, and go to state 1

    $default  reduce using rule 5 (stmts)

    stmts   go to state 9
    stmt    go to state 5
    assign  go to state 6
    varlet  go to state 7


State 6

    6 stmt: assign .

    $default  reduce using rule 6 (stmt)


State 7

    7 assign: varlet . LET expr SEMICOLON

    LET  shift, and go to state 10


State 8

    0 $accept: program $end .

    $default  accept


State 9

    4 stmts: stmt stmts .

    $default  reduce using rule 4 (stmts)


State 10

    7 assign: varlet LET . expr SEMICOLON

    BRACKET_L  shift, and go to state 11
    TRUEVAL    shift, and go to state 12
    FALSEVAL   shift, and go to state 13
    NUM        shift, and go to state 14
    FLOAT      shift, and go to state 15
    ID         shift, and go to state 16

    expr      go to state 17
    constant  go to state 18
    floatval  go to state 19
    intval    go to state 20
    boolval   go to state 21


State 11

   11 expr: BRACKET_L . expr binop expr BRACKET_R

    BRACKET_L  shift, and go to state 11
    TRUEVAL    shift, and go to state 12
    FALSEVAL   shift, and go to state 13
    NUM        shift, and go to state 14
    FLOAT      shift, and go to state 15
    ID         shift, and go to state 16

    expr      go to state 22
    constant  go to state 18
    floatval  go to state 19
    intval    go to state 20
    boolval   go to state 21


State 12

   17 boolval: TRUEVAL .

    $default  reduce using rule 17 (boolval)


State 13

   18 boolval: FALSEVAL .

    $default  reduce using rule 18 (boolval)


State 14

   16 intval: NUM .

    $default  reduce using rule 16 (intval)


State 15

   15 floatval: FLOAT .

    $default  reduce using rule 15 (floatval)


State 16

   10 expr: ID .

    $default  reduce using rule 10 (expr)


State 17

    7 assign: varlet LET expr . SEMICOLON

    SEMICOLON  shift, and go to state 23


State 18

    9 expr: constant .

    $default  reduce using rule 9 (expr)


State 19

   12 constant: floatval .

    $default  reduce using rule 12 (constant)


State 20

   13 constant: intval .

    $default  reduce using rule 13 (constant)


State 21

   14 constant: boolval .

    $default  reduce using rule 14 (constant)


State 22

   11 expr: BRACKET_L expr . binop expr BRACKET_R

    MINUS    shift, and go to state 24
    PLUS     shift, and go to state 25
    STAR     shift, and go to state 26
    SLASH    shift, and go to state 27
    PERCENT  shift, and go to state 28
    LE       shift, and go to state 29
    LT       shift, and go to state 30
    GE       shift, and go to state 31
    GT       shift, and go to state 32
    EQ       shift, and go to state 33
    OR       shift, and go to state 34
    AND      shift, and go to state 35

    binop  go to state 36


State 23

    7 assign: varlet LET expr SEMICOLON .

    $default  reduce using rule 7 (assign)


State 24

   20 binop: MINUS .

    $default  reduce using rule 20 (binop)


State 25

   19 binop: PLUS .

    $default  reduce using rule 19 (binop)


State 26

   21 binop: STAR .

    $default  reduce using rule 21 (binop)


State 27

   22 binop: SLASH .

    $default  reduce using rule 22 (binop)


State 28

   23 binop: PERCENT .

    $default  reduce using rule 23 (binop)


State 29

   24 binop: LE .

    $default  reduce using rule 24 (binop)


State 30

   25 binop: LT .

    $default  reduce using rule 25 (binop)


State 31

   26 binop: GE .

    $default  reduce using rule 26 (binop)


State 32

   27 binop: GT .

    $default  reduce using rule 27 (binop)


State 33

   28 binop: EQ .

    $default  reduce using rule 28 (binop)


State 34

   29 binop: OR .

    $default  reduce using rule 29 (binop)


State 35

   30 binop: AND .

    $default  reduce using rule 30 (binop)


State 36

   11 expr: BRACKET_L expr binop . expr BRACKET_R

    BRACKET_L  shift, and go to state 11
    TRUEVAL    shift, and go to state 12
    FALSEVAL   shift, and go to state 13
    NUM        shift, and go to state 14
    FLOAT      shift, and go to state 15
    ID         shift, and go to state 16

    expr      go to state 37
    constant  go to state 18
    floatval  go to state 19
    intval    go to state 20
    boolval   go to state 21


State 37

   11 expr: BRACKET_L expr binop expr . BRACKET_R

    BRACKET_R  shift, and go to state 38


State 38

   11 expr: BRACKET_L expr binop expr BRACKET_R .

    $default  reduce using rule 11 (expr)
